
On Windows: 

//Phpunit 10 Test setup in Core PHP  (Working)

//Cmd
php ./vendor/bin/phpunit --version
 
//Run Test cmd
php ./vendor/bin/phpunit 
OR
php ./vendor/bin/phpunit tests


Dirs Structures: 

tests / CalculatorTest.php
vendor
phpunit.xml
composer.json
composer.lock


//1. Composer.json 

{
    "require-dev": {
        "phpunit/phpunit": "10"
    }
}

//2.

phpunit.xml

<?xml version="1.0" encoding="UTF-8" ?>

    <phpunit bootstrap="vendor/autoload.php" colors="true">
        <testsuites>
            <testsuite name="unit">
                <directory>tests</directory>
            </testsuite>
        </testsuites>
    </phpunit>


//3.

tests/CalculatorTest.php

<?php

use PHPUnit\Framework\TestCase;


class CalculatorTest extends TestCase {
	
   public function testAddCanNumbers() {
     
     $this->assertSame(1,1);
   }

   public function testSbtractCanNumbers() {
     
     $this->assertSame(1,1);
   }

}



//4. Run commands

php ./vendor/bin/phpunit --version
OR
php ./vendor/bin/phpunit 
php ./vendor/bin/phpunit tests        //Run test


--------------------------------------------------------------


//More Adding as NameSpace Using PSR-4

{
    "require-dev": {
        "phpunit/phpunit": "10"
    },
    "autoload": {
      "psr-4": {
        "App\\":"app"
      }
    }
}


composer dumpautoload

//Creating app/Maths.php

<?php 
namespace App;

class Maths {
  
   public function add($num1,$num2) {
      
      return $num1 + $num2;

   }

   public function sub($num1,$num2) {
     
      return $num1 - $num2;     

   }

   public function muliply($num1,$num2) {     
     
      return $num1 * $num2;

   }  
 
   public function devide($num1,$num2) {     
     
      return $num1 / $num2;     

   }     
   
}

?>


//Tests/Calculator.php

<?php declare(strict_types=1);

use PHPUnit\Framework\TestCase;

//Method 3
use App\Maths;

class CalculatorTest extends TestCase {
  
  //Method 1
   public function testAddCanNumbers() {
      
     $this->assertSame(2,(1+1));
   }



//Method 2
//Creating Object from Maths.php file in app folder

  public function testAdd() {

      $maths = new Maths();

      $add = $maths->add(2,2);

      $this->assertEquals(4, $add);

  }
  
     
  public function testSub() {

      $maths = new Maths();

      $sub = $maths->sub(2,2);

      $this->assertEquals(0, $sub);

  } 

  
   
}

?>

------------------------------------------------------------------
